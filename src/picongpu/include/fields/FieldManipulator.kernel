/**
 * Copyright 2013-2015 Axel Huebl, Heiko Burau, Rene Widera, Benjamin Worpitz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "simulation_classTypes.hpp"
#include "simulation_defines.hpp"
#include "types.h"

namespace picongpu
{

using namespace PMacc;

template<
    int pos,
    typename T_Acc,
    typename T_BoxedMemory,
    typename T_Mapping>
DINLINE void absorb(
    T_Acc const & acc,
    T_BoxedMemory const & field,
    uint32_t const & thickness,
    float_X const & absorber_strength,
    T_Mapping const & mapper,
    DataSpace<simDim> const & direction)
{
    DataSpace<simDim> const blockIndex(alpaka::idx::getIdx<alpaka::Grid, alpaka::Blocks>(acc));
    DataSpace<simDim> const threadIndex(alpaka::idx::getIdx<alpaka::Block, alpaka::Threads>(acc));

    typedef typename MappingDesc::SuperCellSize SuperCellSize;
    const DataSpace<simDim> superCellIdx(mapper.getSuperCellIndex(DataSpace<simDim > (blockIndex)));

    const int linearThreadIdx = DataSpaceOperations<simDim>::template map<SuperCellSize > (threadIndex);

    DataSpace<simDim> cell(superCellIdx * SuperCellSize::toRT() + threadIndex);
    //cells in simulation
    const DataSpace<simDim> gCells = mapper.getGridSuperCells() * SuperCellSize::toRT();

    PMACC_AUTO(finish,alpaka::block::shared::allocVar<int>(acc));

    alpaka::block::sync::syncBlockThreads(acc); /*wait that all shared memory is initialised*/

    float_X factor = float_X(0.0);

    do
    {
        cell[pos] = cell[pos] + (MappingDesc::SuperCellSize::toRT()[pos]*(direction[pos]*-1));
        if (linearThreadIdx == 0)
            finish = 0;
        alpaka::block::sync::syncBlockThreads(acc);

        if (direction[pos] != 0)
        {
            if (direction[pos] < 0)
            {
                factor = (float) (MappingDesc::SuperCellSize::toRT()[pos] + thickness - cell[pos] - 1);
            }
            else
            {
                factor = (float) ((MappingDesc::SuperCellSize::toRT()[pos] + cell[pos]) - gCells[pos] + thickness);
            }

        }

        if (factor <= float_X(0.0))
        {
            factor = float_X(0.0);
            alpaka::atomic::atomicOp<alpaka::atomic::op::Exch>(acc, &finish, 1);
        }
        else
        {
            float_X a = math::exp(float_X(-absorber_strength) * (factor));

            float3_X tmp = field(cell);
            tmp.x() *= a;
            tmp.y() *= a;
            tmp.z() *= a;
            field(cell) = tmp;
        }
        //  cell =cell+ MappingDesc::SuperCellSize::toRT()*(pos*-1);
        alpaka::block::sync::syncBlockThreads(acc);
    }
    while (finish == 0);
}

struct KernelAbsorbBorder
{
template<
    typename T_Acc,
    typename T_BoxedMemory,
    typename T_Mapping>
ALPAKA_FN_ACC void operator()(
    T_Acc const & acc,
    T_BoxedMemory const & field,
    uint32_t const & thickness,
    float_X const & absorber_strength,
    T_Mapping const & mapper) const
{
    static_assert(
        alpaka::dim::Dim<T_Acc>::value == T_Mapping::Dim,
        "The KernelAbsorbBorder functor has to be called with a T_Mapping::Dim dimensional accelerator!");

    DataSpace<simDim> const direction(Mask::getRelativeDirections<simDim>(mapper.getExchangeType()));

    //this is a workaround that we get a kernel without lmem
    if (direction.x() != 0)
        absorb < 0 > (acc, field, thickness, absorber_strength, mapper, direction);
    else if (direction.y() != 0)
        absorb < 1 > (acc, field, thickness, absorber_strength, mapper, direction);
#if (SDIMDIM==DIM3)
    else if (direction.z() != 0)
        absorb < 2 > (acc, field, thickness, absorber_strength, mapper, direction);
#endif
}

};

} //namespace
