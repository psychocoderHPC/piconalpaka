/**
 * Copyright 2013-2015 Rene Widera, Felix Schmitt, Benjamin Worpitz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once


#include "types.h"
#include "simulation_types.hpp"
#include "dimensions/DataSpaceOperations.hpp"


namespace picongpu
{

using namespace PMacc;

/** Copy Particles to a Single Frame
 *
 * - copy particle data that was stored in a linked list of frames for each
 *   super-cell on the GPU to a single frame on the CPU RAM
 * - the deep on-GPU hierarchy must be copied to the CPU beforehand
 * - remove species attributes `multiMask` and `localCellIdx`
 * - add new attribute `globalCellIdx` (particle offset to begin of global
 *   moving window)
 */
struct ConcatListOfFrames
{
    DataSpace<simDim> gridDim;

    ConcatListOfFrames(const DataSpace<simDim>& gridDim) :
    gridDim(gridDim)
    {

    }

    /** concatenate list of frames to single frame
     *
     * @param counter scalar offset in `destFrame`
     * @param destFrame single frame were all particles are copied in
     * @param srcBox particle box were particles are read from
     * @param filter filter to select particles
     * @param particleOffset can be negative for the first GPU: localDomain.offset - globalWindow.offset
     * @param mapper mapper which describe the area were particles are copied from
     */
    template<class T_DestFrame, class T_SrcBox, class T_Filter, class T_Space, class T_Mapping>
    void operator()(int& counter, T_DestFrame destFrame, T_SrcBox srcBox, T_Filter filter, T_Space particleOffset, T_Mapping mapper)
    {
        #pragma omp parallel for
        for (int linearBlockIdx = 0;
             linearBlockIdx < gridSize.productOfComponents();
             ++linearBlockIdx
             )
        {
            DataSpace<simDim> const blockIndex(DataSpaceOperations<simDim>::map(gridDim, linearBlockIdx));

            using namespace PMacc::particles::operations;

            typedef T_DestFrame DestFrameType;
            typedef typename T_SrcBox::FrameType SrcFrameType;
            typedef T_Mapping Mapping;
            typedef typename Mapping::SuperCellSize Block;

            SrcFrameType *srcFramePtr;
            int localCounter;
            int globalOffset;
            const int particlePerFrame = PMacc::math::CT::volume<SuperCellSize>::type::value;
            int storageOffset[particlePerFrame];

            bool isValid;

            const DataSpace<Mapping::Dim> block = mapper.getSuperCellIndex(blockIndex);
            const DataSpace<Mapping::Dim> superCellPosition((block - mapper.getGuardingSuperCells()) * mapper.getSuperCellSize());
            filter.setSuperCellPosition(superCellPosition);

            srcFramePtr = &(srcBox.getFirstFrame(block, isValid));

            while (isValid) //move over all Frames
            {
                localCounter = 0;
                /* clear storageOffset array*/
                for (int threadIndex = 0; threadIndex < particlePerFrame; ++threadIndex)
                {
                    storageOffset[threadIndex] = -1;
                    PMACC_AUTO(parSrc, ((*srcFramePtr)[threadIndex]));
                    /*count particle in frame*/
                    if (parSrc[multiMask_] == 1 && filter(*srcFramePtr, threadIndex))
                        storageOffset[threadIndex] = localCounter++;
                }

                /* atomic update with openmp*/
                #pragma omp critical
                {
                    globalOffset = counter;
                    counter += localCounter;
                }

                for (int threadIndex = 0; threadIndex < particlePerFrame; ++threadIndex)
                {
                    if (storageOffset[threadIndex] != -1)
                    {
                        PMACC_AUTO(parSrc, ((*srcFramePtr)[threadIndex]));
                        PMACC_AUTO(parDest, destFrame[globalOffset + storageOffset[threadIndex]]);
                        PMACC_AUTO(parDestNoGlobalIdx, deselect<globalCellIdx<> >(parDest));
                        assign(parDestNoGlobalIdx, parSrc);
                        /*calculate global cell index*/
                        DataSpace<Mapping::Dim> localCell(DataSpaceOperations<Mapping::Dim>::template map<Block>(parSrc[localCellIdx_]));
                        parDest[globalCellIdx_] = particleOffset + superCellPosition + localCell;
                    }
                }
                /*get next frame in supercell*/
                srcFramePtr = &(srcBox.getNextFrame(*srcFramePtr, isValid));

            }
        }
    }

};

/** copy particle of a species to a host frame
 *
 * @tparam T_DestFrame type of destination frame
 * @tparam T_SrcBox type of the data box of source memory
 * @tparam T_Filter type of filer with particle selection rules
 * @tparam T_Space type of coordinate description
 * @tparam T_Mapping type of the mapper to map cuda idx to supercells
 *
 * @param counter pointer to a device counter to reserve memory in destFrame
 * @param destFrame frame were we store particles in host memory (no Databox<...>)
 * @param srcBox ParticlesBox with frames
 * @param filer filer with rules to select particles
 * @param particleOffset can be negative for the first GPU: localDomain.offset - globalWindow.offset
 * @param mapper apper to map cuda idx to supercells
 */
struct KernelCopySpecies
{
template<
    typename T_Acc,
    typename T_DestFrame,
    typename T_SrcBox,
    typename T_Filter,
    typename T_Space,
    typename T_Mapping>
ALPAKA_FN_ACC void operator()(
    T_Acc const & acc,
    int* counter,
    T_DestFrame const & destFrame,
    T_SrcBox const & srcBox,
    T_Filter & filter,
    T_Space const & gpuOffset,
    T_Mapping const & mapper) const
{
    using namespace PMacc::particles::operations;

    typedef T_DestFrame DestFrameType;
    typedef typename T_SrcBox::FrameType SrcFrameType;
    typedef T_Mapping Mapping;
    typedef typename Mapping::SuperCellSize Block;

    DataSpace<simDim> const blockIndex(alpaka::idx::getIdx<alpaka::Grid, alpaka::Blocks>(acc));
    DataSpace<simDim> const threadIndex(alpaka::idx::getIdx<alpaka::Block, alpaka::Threads>(acc));

    PMACC_AUTO(srcFramePtr,alpaka::block::shared::allocVar<__COUNTER__,SrcFrameType *>(acc));
    PMACC_AUTO(localCounter,alpaka::block::shared::allocVar<__COUNTER__,int>(acc));
    PMACC_AUTO(globalOffset,alpaka::block::shared::allocVar<__COUNTER__,int>(acc));

    int storageOffset;

    PMACC_AUTO(isValid,alpaka::block::shared::allocVar<__COUNTER__,bool>(acc));

    alpaka::block::sync::syncBlockThreads(acc); /*wait that all shared memory is initialised*/

    const DataSpace<Mapping::Dim> block = mapper.getSuperCellIndex(DataSpace<simDim > (blockIndex));
    const DataSpace<Mapping::Dim> superCellPosition((block - mapper.getGuardingSuperCells()) * mapper.getSuperCellSize());
    filter.setSuperCellPosition(superCellPosition);
    if (threadIndex.x() == 0)
    {
        localCounter = 0;
        srcFramePtr = &(srcBox.getFirstFrame(block, isValid));
    }
    alpaka::block::sync::syncBlockThreads(acc);
    while (isValid) //move over all Frames
    {
        PMACC_AUTO(parSrc, ((*srcFramePtr)[threadIndex.x()]));
        storageOffset = -1;
        /*count particle in frame*/
        if (parSrc[multiMask_] == 1 && filter(*srcFramePtr, threadIndex.x()))
            storageOffset = alpaka::atomic::atomicOp<alpaka::atomic::op::Add>(acc, &localCounter, 1);
        alpaka::block::sync::syncBlockThreads(acc);
        if (threadIndex.x() == 0)
        {
            /*reserve host memory for particle*/
            globalOffset = alpaka::atomic::atomicOp<alpaka::atomic::op::Add>(acc, counter, localCounter);
        }
        alpaka::block::sync::syncBlockThreads(acc);
        if (storageOffset != -1)
        {
            PMACC_AUTO(parDest, destFrame[globalOffset + storageOffset]);
            PMACC_AUTO(parDestNoGlobalIdx, deselect<globalCellIdx<> >(parDest));
            assign(parDestNoGlobalIdx, parSrc);
            /*calculate global cell index*/
            DataSpace<Mapping::Dim> localCell(DataSpaceOperations<Mapping::Dim>::template map<Block>(parSrc[localCellIdx_]));
            parDest[globalCellIdx_] = particleOffset + superCellPosition + localCell;
        }
        alpaka::block::sync::syncBlockThreads(acc);
        if (threadIndex.x() == 0)
        {
            /*get next frame in supercell*/
            srcFramePtr = &(srcBox.getNextFrame(*srcFramePtr, isValid));
            localCounter = 0;
        }
        alpaka::block::sync::syncBlockThreads(acc);
    }
}
};

} //namespace picongpu
